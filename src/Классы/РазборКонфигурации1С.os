///////////////////////////////////////////////////////////////////////////////
//
// Модуль разбора файлов конфигурации 
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////////////////

#Использовать fs
#Использовать "../ЧтениеМодулей"

///////////////////////////////////////////////////////////////////////////////

Перем СтруктураКаталогов;
Перем ЧитательОписаний;
Перем ОписаниеКонфигурации;
Перем ДанныеКонфигурации;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

// Читает описание структуры конфигурации
//	* Описание конфигурации
//	* Объекты конфигурации, включая все подсистемы
//	* Выполняет привязку объектов к подсистемам
//	* Определяет местоположение описаний (файлов и каталогов)
//
Процедура ПрочитатьСтруктуруКонфигурации() Экспорт
	
	ОписаниеКонфигурации = ПрочитатьОписаниеКонфигурации();
	
	ЗаполнитьПодсистемыОбъектовКонфигурации();
	
	ЗаполнитьИменаФайлов();

КонецПроцедуры

// Выполняет поиск всех модулей конфигурации
//
Процедура НайтиМодулиКонфигурации() Экспорт

	МодулиКонфигурации = СтруктурыОписаний.ТаблицаОписанияМодулей();

	// todo сделать чтение форм
	ФормыКонфигурации = Новый ТаблицаЗначений;
	ФормыКонфигурации.Колонки.Добавить("Родитель");
	ФормыКонфигурации.Колонки.Добавить("ЭтоУправляемаяФорма");
	ФормыКонфигурации.Колонки.Добавить("Наименование");
	
	// todo сделать чтение команд
	КомандыКонфигурации = Новый ТаблицаЗначений;
	КомандыКонфигурации.Колонки.Добавить("Родитель");
	КомандыКонфигурации.Колонки.Добавить("Наименование");
	
	ОписаниеКонфигурации.Вставить("ФормыКонфигурации", ФормыКонфигурации);
	ОписаниеКонфигурации.Вставить("КомандыКонфигурации", КомандыКонфигурации);
	ОписаниеКонфигурации.Вставить("МодулиКонфигурации", МодулиКонфигурации);
	
	Для Каждого ОбъектКонфигурации Из ОписаниеКонфигурации.ОбъектыКонфигурации Цикл

		ФайлыМодулей = СтруктураКаталогов.НайтиМодулиОбъекта(ОбъектКонфигурации.Наименование, ОбъектКонфигурации.Тип, Истина);
		
		Для Каждого ИмяФайлаМодуля Из ФайлыМодулей Цикл

			ПолучитьОписаниеМодуляПоИмениФайла(ИмяФайлаМодуля, ОбъектКонфигурации, ОписаниеКонфигурации);

		КонецЦикла; 

	КонецЦикла;

	МодулиКонфигурации.Сортировать("ПутьКФайлу");

КонецПроцедуры

// Возвращает объект содержащий считанное описание конфигурации
//
//  Возвращаемое значение:
//   Структура - Описание данных конфигурации
//		* СвойстваКонфигурации - Структура - Свойства конфигурации
//		* ОбъектыКонфигурации - ТаблицаЗначений - Описание объектов конфигурации, см СтруктурыОписаний.ТаблицаОписанияОбъектовКонфигурации
//		* МодулиКонфигурации - ТаблицаЗначений - Описание модулей конфигурации, см СтруктурыОписаний.ТаблицаОписанияМодулей
//		* ФормыКонфигурации - ТаблицаЗначений - Описание форм конфигурации
//		* КомандыКонфигурации - ТаблицаЗначений - Описание команд конфигурации
//
Функция ОписаниеКонфигурации() Экспорт
	
	Возврат ОписаниеКонфигурации;
	
КонецФункции

// Читает детальное описание констант
//
//  Возвращаемое значение:
//   Массив - Коллекция описаний констант, каждый элемент это структура
//		* Имя - Имя константы
//		* Тип - Тип значения константы
//		* Описание - Описание константы
//		* Подсистема - Имя подсистемы, в которую включена константа
//		* ПодсистемаПредставление - Представление подсистемы, в которую включена константа
//
Функция ПрочитатьОписаниеКонстант() Экспорт

	Фильтр = Новый Структура("Тип", "Constant");
	
	СтрокиКонстант = ОписаниеКонфигурации.ОбъектыКонфигурации.НайтиСтроки(Фильтр);
	
	МассивОписанийКонстант = Новый Массив;
	
	Для Каждого Объект Из СтрокиКонстант Цикл
		
		ОписаниеИзXML = ПолучитьОписаниеКонстанты(Объект.ПутьКФайлу);
		
		ОписаниеКонстанты = Новый Структура("Имя, Тип, Описание, Подсистема, ПодсистемаПредставление");  
		
		ОписаниеКонстанты.Имя = Объект.Наименование;
		ОписаниеКонстанты.Тип = ОписаниеИзXML.ТипКонстанты;
		ОписаниеКонстанты.Описание = ОписаниеИзXML.ТекстОписания;

		Если ЗначениеЗаполнено(Объект.Подсистемы) Тогда
			ОписаниеКонстанты.Подсистема = Объект.Подсистемы[0].Имя;
			ОписаниеКонстанты.ПодсистемаПредставление = Объект.Подсистемы[0].ПредставлениеКратко;
		КонецЕсли;

		МассивОписанийКонстант.Добавить(ОписаниеКонстанты);

	КонецЦикла;

	Возврат МассивОписанийКонстант;

КонецФункции

// Читает и выполняет анализ содержимого модуля
//	Устанавливает реквизиты "НаборБлоков" и "Содержимое"
// Параметры:
//   СтрокаМодуль - СтрокаТаблицыЗначений - Базовое описание модуля
//
Процедура ПрочитатьСодержимоеМодуля(СтрокаМодуль) Экспорт

	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(СтрокаМодуль.ПутьКФайлу, КодировкаТекста.UTF8NoBOM);	
	
	СодержимоеМодуля = ЧтениеМодулей.ПрочитатьМодуль(Файл, СтрокаМодуль);
	СтрокаМодуль.Содержимое = СодержимоеМодуля.Содержимое;
	СтрокаМодуль.НаборБлоков = СодержимоеМодуля.БлокиМодуля;

	Если СтрокаМодуль.ТипМодуля = ТипМодуля.ОбщийМодуль Тогда
		
		Если СтрокаМодуль.Родитель.Описание = Неопределено Тогда
			
			СтрокаМодуль.Родитель.Описание = ЧитательОписаний.ПрочитатьСвойстваИзФайла(СтрокаМодуль.ФайлОписания);
			
		КонецЕсли;

		СтрокаМодуль.ОписаниеМодуля.Вставить("Глобальный", СтрокаМодуль.Родитель.Описание.Global = "true");

	КонецЕсли;

КонецПроцедуры

// Удаляет из структуры объекты не включенные в подсистемы
//
Процедура УдалитьОбъектыВнеПодсистем() Экспорт
	
	Количество = ОписаниеКонфигурации.ОбъектыКонфигурации.Количество();
	
	Для Инд = 1 По Количество Цикл

		Если ОписаниеКонфигурации.ОбъектыКонфигурации[Количество - Инд].Подсистемы.Количество() = 0 Тогда
			
			ОписаниеКонфигурации.ОбъектыКонфигурации.Удалить(Количество - Инд);
			
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

// Возвращает полное наименование объекта конфигурации или модуля
//
// Параметры:
//   СтрокаОбъект - СтрокаТаблицыЗначений - Описание объекта или модуля конфигурации
//   ДобавлятьПрефиксДляОбщихМодулей - Булево - Признак, добавлять ли тип объекта для общих модулей
//
//  Возвращаемое значение:
//   Строка - Полное имя
//
Функция ПолноеИмяОбъекта(СтрокаОбъект, ДобавлятьПрефиксДляОбщихМодулей = Истина) Экспорт

	Возврат ЧтениеОписанийБазовый.ПолноеИмяОбъекта(СтрокаОбъект, ДобавлятьПрефиксДляОбщихМодулей);
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

Функция ПрочитатьОписаниеКонфигурации()
	
	ФайлКонфигурации = СтруктураКаталогов.ИмяФайлаОписанияКонфигурации();
	
	Если Не ФС.ФайлСуществует(ФайлКонфигурации) Тогда

		ВызватьИсключение СтрШаблон("Файл описания конфигурации ""%1"" не обнаружен", ФайлКонфигурации);

	КонецЕсли;

	ОписаниеКонфигурации = ЧитательОписаний.ПрочитатьОписаниеКонфигурации(ФайлКонфигурации);
	
	СвойстваКонфигурации = ОписаниеКонфигурации.СвойстваКонфигурации;
	ОбъектыКонфигурации = ОписаниеКонфигурации.ОбъектыКонфигурации;

	// добавим руками объект "Configuration" для модулей приложения
	ПустаяСтрокаОбъектКонфигурации = СтруктурыОписаний.ОписаниеОбъектаКонфигурацииЗначенияПоУмолчанию();
	НовСтрока = ОбъектыКонфигурации.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, ПустаяСтрокаОбъектКонфигурации);
	НовСтрока.Тип = ТипыОбъектовКонфигурации.ИмяТипаКонфигурации();
	НовСтрока.Наименование = НовСтрока.Тип;
	НовСтрока.ПутьКФайлу = ФайлКонфигурации;
	
	Возврат Новый Структура("СвойстваКонфигурации, ОбъектыКонфигурации", СвойстваКонфигурации, ОбъектыКонфигурации);

КонецФункции

Процедура ЗаполнитьПодсистемыОбъектовКонфигурации()
	
	// дополним объекты информацией о подсистемах
	ПодсистемыКонфигурации = ПрочитатьПодсистемыКонфигурации();

	ОписаниеКонфигурации.Вставить("ПодсистемыКонфигурации", ПодсистемыКонфигурации);

	Для Каждого ОбъектКонфигурации Из ОписаниеКонфигурации.ОбъектыКонфигурации Цикл
		
		Подсистемы = ПодсистемыКонфигурации.НайтиСтроки(Новый Структура("ОбъектМетаданных", ОбъектКонфигурации.Тип + "." + ОбъектКонфигурации.Наименование));
		
		Если Подсистемы.Количество()  Тогда

			// ставим первую
			ОбъектКонфигурации.Подсистемы = Подсистемы;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьОписаниеМодуляПоИмениФайла(Знач ИмяФайлаМодуля, ОбъектКонфигурации, ОписаниеКонфигурации)

	НовыйМодульКонфигурации = Неопределено;
	
	ПустаяСтрокаМодульКонфигурации = Новый Структура(
		"ПутьКФайлу,	ТипМодуля,	ОписаниеМодуля,		Родитель, 		РодительФорма, 	РодительКоманда, 	НаборБлоков, 	Содержимое", 
		"", 			"", 		Новый Структура,	Неопределено, 	Неопределено, 	Неопределено, 		Неопределено, 	Неопределено);
	
	ТипЭтогоМодуля = ТипМодуля.ТипМодуляПоИмениФайла(ИмяФайлаМодуля);

	Если Не ПустаяСтрока(ТипЭтогоМодуля) Тогда
		
		ФормаОбъекта = Неопределено;
		КомандаОбъекта = Неопределено;
		
		Если ТипЭтогоМодуля = ТипМодуля.МодульОбъекта
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульМенеджера
			ИЛИ ТипЭтогоМодуля = ТипМодуля.ОбщийМодуль
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульУправляемогоПриложения
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульСеанса
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульВнешнегоСоединения
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульОбычногоПриложения  Тогда

		ИначеЕсли ТипМодуля.ЭтоМодульФормы(ТипЭтогоМодуля) Тогда

			ФормаОбъекта = ОписаниеКонфигурации.ФормыКонфигурации.Добавить();
			ФормаОбъекта.Родитель = ОбъектКонфигурации;
			ФормаОбъекта.ЭтоУправляемаяФорма = ТипЭтогоМодуля = ТипМодуля.МодульУправляемойФормы;
			ФормаОбъекта.Наименование = ПолучитьИмяФормыИзИмениФайлаМодуля(ИмяФайлаМодуля);

		ИначеЕсли ТипЭтогоМодуля = ТипМодуля.МодульКоманды Тогда

			КомандаОбъекта = ОписаниеКонфигурации.КомандыКонфигурации.Добавить();
			КомандаОбъекта.Родитель = ОбъектКонфигурации;
			КомандаОбъекта.Наименование = ПолучитьИмяКомандыИзИмениФайлаМодуля(ИмяФайлаМодуля);

		Иначе

			ВызватьИсключение "Тип модуля: " + ТипЭтогоМодуля + " не имеет алгоритма разбора";

		КонецЕсли;
		
		НовыйМодульКонфигурации = ОписаниеКонфигурации.МодулиКонфигурации.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйМодульКонфигурации, ПустаяСтрокаМодульКонфигурации);
		НовыйМодульКонфигурации.ТипМодуля = ТипЭтогоМодуля;
		НовыйМодульКонфигурации.ПутьКФайлу = ИмяФайлаМодуля;
		НовыйМодульКонфигурации.Родитель = ОбъектКонфигурации;
		НовыйМодульКонфигурации.РодительФорма = ФормаОбъекта;
		НовыйМодульКонфигурации.РодительКоманда = КомандаОбъекта;
		
	КонецЕсли;

	Если НовыйМодульКонфигурации <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ПустаяСтрокаМодульКонфигурации, НовыйМодульКонфигурации);
		
	КонецЕсли;
	
	Возврат ПустаяСтрокаМодульКонфигурации;

КонецФункции

///////////////////////////////////////////////////////////////////

Функция ПолучитьОписаниеКонстанты(ПутьКФайлу)
	
	ПараметрыОписанияКонстанты = СтруктурыОписаний.ОписаниеКонстанты();
	
	Описание = ЧитательОписаний.ПрочитатьСвойстваИзФайла(ПутьКФайлу, ПараметрыОписанияКонстанты);

	РезультатПоиска = Новый Структура("ТипКонстанты, ТекстОписания", Описание.Тип , Описание.Пояснение);

	Возврат РезультатПоиска;
	
КонецФункции

///////////////////////////////////////////////////////////////////

Процедура ЗаполнитьИменаФайлов()

	Для Каждого СтрокаОбъектКонфигурации Из ОписаниеКонфигурации.ОбъектыКонфигурации Цикл
		
		Если ПустаяСтрока(СтрокаОбъектКонфигурации.ПутьКФайлу) Тогда
			
			СтрокаОбъектКонфигурации.ПутьКФайлу = СтруктураКаталогов.ИмяФайлаОписанияОбъекта(СтрокаОбъектКонфигурации.Наименование, СтрокаОбъектКонфигурации.Тип);
			
		КонецЕсли;

	КонецЦикла

КонецПроцедуры

///////////////////////////////////////////////////////////////////

Функция ПолучитьИмяФормыИзИмениФайлаМодуля(ПолноеИмяФайла)

	МассивЧастейИмени = СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПути());
	Если МассивЧастейИмени.Количество() > 3 Тогда

		Номер = 2;
		Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
        Если Родитель = "Form" Тогда

			Номер = Номер + 1;
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];

		КонецЕсли;

		Если Родитель = "Ext" Тогда

			Номер = Номер + 1;
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];

		КонецЕсли;

		Возврат Родитель;

	Иначе

		ВызватьИсключение "Ошибочная структура имени файла: " + ПолноеИмяФайла;

	КонецЕсли;

	Возврат "";

КонецФункции

Функция ПолучитьИмяКомандыИзИмениФайлаМодуля(ПолноеИмяФайла)

	МассивЧастейИмени = СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПути());
	Если МассивЧастейИмени.Количество() > 3 Тогда

		Номер = 2;
		Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
        
		Если Родитель = "Ext" Тогда

			Номер = Номер + 1;
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];

		КонецЕсли;

		Возврат Родитель;

	Иначе

		ВызватьИсключение "Ошибочная структура имени файла: " + ПолноеИмяФайла;

	КонецЕсли;

	Возврат "";

КонецФункции

///////////////////////////////////////////////////////////////////

Функция ПрочитатьПодсистемыКонфигурации()

	ОписаниеПодсистем = СтруктурыОписаний.ТаблицаОписанияПодсистем();

	Для Каждого ФайлыПодсистемы Из СтруктураКаталогов.НайтиФайлыПодсистем() Цикл

		ПрочитатьПодсистему(ФайлыПодсистемы, ОписаниеПодсистем, "", "", Неопределено, Неопределено);
		
	КонецЦикла;
	
	Возврат ОписаниеПодсистем;

КонецФункции

Процедура ПрочитатьПодсистему(ФайлыПодсистемы, ОписаниеПодсистем, Знач ПодсистемаИмя, Знач ПодсистемаПредставление, Знач Визуальная, Знач Родитель)

	СвойстваОписания = ЧитательОписаний.ПрочитатьСвойстваИзФайла(ФайлыПодсистемы.ФайлОписания, СтруктурыОписаний.ОписаниеПодсистемы());
	
	ВКомандномИнтерфейсе = СвойстваОписания.ВключатьВКомандныйИнтерфейс = "true";
	
	Визуальная = ?(Визуальная = Неопределено, ВКомандномИнтерфейсе, Мин(Визуальная, ВКомандномИнтерфейсе));
	ПодсистемаИмя = ПодсистемаИмя + ?(ПустаяСтрока(ПодсистемаИмя), "", ".") + СвойстваОписания.Наименование;
	ПодсистемаПредставление = ПодсистемаПредставление + ?(ПустаяСтрока(ПодсистемаПредставление), "", "/") + СвойстваОписания.Синоним;
	
	Если Родитель <> Неопределено Тогда // В списке объектов конфигурации подсистемы только первого уровня
		
		СтрОбъект = ОписаниеКонфигурации.ОбъектыКонфигурации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрОбъект, СтруктурыОписаний.ОписаниеОбъектаКонфигурацииЗначенияПоУмолчанию());
		СтрОбъект.Тип = "Subsystem";
		СтрОбъект.Наименование = ПодсистемаИмя;
		СтрОбъект.ПутьКФайлу = ФайлыПодсистемы.ФайлОписания;
		СтрОбъект.ПутьККаталогу = ФайлыПодсистемы.КаталогОписания;
		СтрОбъект.Описание = СвойстваОписания;
		СтрОбъект.Родитель = ОписаниеКонфигурации.ОбъектыКонфигурации.Найти(Родитель.Имя, "Наименование");

	КонецЕсли;
	
	Если СвойстваОписания.Состав.Количество() Тогда
		Состав = СвойстваОписания.Состав;
	Иначе
		Состав = Новый Массив();
		Состав.Добавить(Неопределено);
	КонецЕсли;
		
	Для Каждого ОбъектМетаданных Из Состав Цикл
		
		ЭтаПодсистема = ОписаниеПодсистем.Добавить();
		ЭтаПодсистема.Имя = ПодсистемаИмя;
		ЭтаПодсистема.ИмяКратко = СвойстваОписания.Наименование;
		ЭтаПодсистема.Представление = ПодсистемаПредставление;
		ЭтаПодсистема.ПредставлениеКратко = СвойстваОписания.Синоним;
		ЭтаПодсистема.ПодсистемаОписание = СвойстваОписания.Комментарий;
		ЭтаПодсистема.ОбъектМетаданных = ОбъектМетаданных;
		ЭтаПодсистема.Визуальная = Визуальная;
		ЭтаПодсистема.Родитель = Родитель;
		
	КонецЦикла;

	Для Каждого ФайлыВложеннойПодсистемы Из ФайлыПодсистемы.Вложенные Цикл

		ПрочитатьПодсистему(ФайлыВложеннойПодсистемы, ОписаниеПодсистем, ПодсистемаИмя, ПодсистемаПредставление, Визуальная, ЭтаПодсистема)
		
	КонецЦикла;

КонецПроцедуры

Процедура ПриСозданииОбъекта(КаталогИсходников)
	
	СтруктураКаталогов = Новый СтруктураКаталоговКонфигурации(КаталогИсходников, "Авто");
	
	Если СтруктураКаталогов.ФорматВыгрузки() = "EDT" Тогда
		
		ЧитательОписаний = ЧтениеОписанийEDT;
		
	Иначе
		
		ЧитательОписаний = ЧтениеОписанийКонфигуратор;
		
	КонецЕсли;

КонецПроцедуры