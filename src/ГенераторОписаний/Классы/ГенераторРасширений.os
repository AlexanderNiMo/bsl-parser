///////////////////////////////////////////////////////////////////
//
// Класс для генерации расширений
//
// (с) BIA Technologies, LLC    
//
///////////////////////////////////////////////////////////////////

#Использовать fs

///////////////////////////////////////////////////////////////////

Перем ЗаписьConfiguration;
Перем ОписаниеКонфигурации;
Перем Лог;
Перем СтруктураКаталоговПриемник;
Перем ПараметрыГенерации;
Перем ГенераторОписаний;

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

Процедура Инициализировать(ИмяРасширения, ПредставлениеРасширения, ПрефиксРасширения) Экспорт
	
	ОписаниеРасширения = СтруктурыОписаний.СоздатьСтруктураОбъекта("Расширение");
	ОписаниеРасширения.Наименование = ИмяРасширения;
	ОписаниеРасширения.Синоним = ПредставлениеРасширения;
	ОписаниеРасширения.ПрефиксИмен = ПрефиксРасширения;
	ОписаниеРасширения.Принадлежность = "Adopted";
	ОписаниеРасширения.Назначение = "Customization";
	
	ОбъектыКонфигурации = СтруктурыОписаний.ТаблицаОписанияОбъектовКонфигурации();
	ОписаниеКонфигурации = Новый Структура("ОбъектыКонфигурации, СвойстваКонфигурации", ОбъектыКонфигурации, ОписаниеРасширения);

	СтрокаКонфигурация = ОбъектыКонфигурации.Добавить();
	ПустаяСтрокаОбъектКонфигурации = СтруктурыОписаний.ОписаниеОбъектаКонфигурацииЗначенияПоУмолчанию();
	
	ЗаполнитьЗначенияСвойств(СтрокаКонфигурация, ПустаяСтрокаОбъектКонфигурации);
	СтрокаКонфигурация.Тип = ТипыОбъектовКонфигурации.ИмяТипаКонфигурации();
	СтрокаКонфигурация.Наименование = СтрокаКонфигурация.Тип;
	СтрокаКонфигурация.ПутьКФайлу = СтруктураКаталоговПриемник.ИмяФайлаОписанияКонфигурации();
	СтрокаКонфигурация.Описание = ОписаниеРасширения;

	ЗаписьConfiguration = ГенераторОписаний.СоздатьОписаниеРасширения(ОписаниеРасширения, ПараметрыГенерации);
	
КонецПроцедуры

// Завершает генерацию расширения и записывает описание корневого файла(configuration.xml)
//
Процедура Зафиксировать() Экспорт
	
	ОписаниеКонфигурации.ОбъектыКонфигурации.Сортировать("Тип, Наименование");
	ТипКонфигурация = ТипыОбъектовКонфигурации.ИмяТипаКонфигурации();

	Для Каждого Стр Из ОписаниеКонфигурации.ОбъектыКонфигурации Цикл
		
		Если Стр.Тип <> ТипКонфигурация Тогда
			
			ГенераторОписаний.ЗарегистрироватьОбъектВКонфигурации(Стр.Наименование, Стр.Тип, ПараметрыГенерации);
			
		КонецЕсли;
		
	КонецЦикла;

    Описание = ГенераторОписанийОбщий.ЗакрытьЗапись(ЗаписьConfiguration);

    Утилиты.ЗаписатьФайл(СтруктураКаталоговПриемник.ИмяФайлаОписанияКонфигурации(), Описание);

    Лог.Информация("Расширение создано");

КонецПроцедуры

Функция ОписаниеКонфигурации() Экспорт
	
	Возврат ОписаниеКонфигурации;

КонецФункции

Функция ДобавитьОбъект(ИмяОбъекта, Знач ТипОбъекта, ОписаниеОбъекта = Неопределено) Экспорт
	
	ТипОбъекта = ТипыОбъектовКонфигурации.НормализоватьИмя(ТипОбъекта);

	НайденныеОбъекты = ОписаниеКонфигурации.ОбъектыКонфигурации.НайтиСтроки(Новый Структура("Наименование, Тип", ИмяОбъекта, ТипОбъекта));
	
	Если НайденныеОбъекты.Количество() Тогда
		
		Описание = НайденныеОбъекты[0];
		
	Иначе
		
		Описание = ОписаниеКонфигурации.ОбъектыКонфигурации.Добавить();
		
		Описание.Наименование = ИмяОбъекта;
		Описание.Тип = ТипОбъекта;
		Описание.ПутьКФайлу = СтруктураКаталоговПриемник.ИмяФайлаОписанияОбъекта(ИмяОбъекта, ТипОбъекта);
		Описание.ПутьККаталогу = СтруктураКаталоговПриемник.КаталогФайловОбъекта(ИмяОбъекта, ТипОбъекта);
		Описание.Описание = ОписаниеОбъекта;
		
		Если ОписаниеОбъекта <> Неопределено Тогда
			
			ЗаписатьОписаниеОбъекта(ТипОбъекта, ОписаниеОбъекта);
			
		КонецЕсли;

	КонецЕсли;

	Возврат Описание;
	
КонецФункции

Функция ПеренестиОбъектВРасширение(ИмяОбъекта, Знач ТипОбъекта, ОписаниеОбъекта = Неопределено) Экспорт
	
	ТипОбъекта = ТипыОбъектовКонфигурации.НормализоватьИмя(ТипОбъекта);

	НайденныеОбъекты = ОписаниеКонфигурации.ОбъектыКонфигурации.НайтиСтроки(Новый Структура("Наименование, Тип", ИмяОбъекта, ТипОбъекта));
	
	Если НайденныеОбъекты.Количество() Тогда
		
		Описание = НайденныеОбъекты[0];
		
		Если ОписаниеОбъекта = Неопределено Тогда
		
			ОписаниеОбъекта = Описание.Описание;
			
		КонецЕсли;
		
	Иначе
		
		Описание = ОписаниеКонфигурации.ОбъектыКонфигурации.Добавить();
		
		Описание.Наименование = ИмяОбъекта;
		Описание.Тип = ТипОбъекта;
		Описание.ПутьКФайлу = СтруктураКаталоговПриемник.ИмяФайлаОписанияОбъекта(ИмяОбъекта, ТипОбъекта);
		Описание.ПутьККаталогу = СтруктураКаталоговПриемник.КаталогФайловОбъекта(ИмяОбъекта, ТипОбъекта);
		Описание.Описание = ОписаниеОбъекта;
		
	КонецЕсли;

	Если ОписаниеОбъекта = Неопределено Тогда
		
		ОписаниеОбъекта = СтруктурыОписаний.СоздатьСтруктураОбъекта(ТипОбъекта);
		ОписаниеОбъекта.Наименование = ИмяОбъекта;

	КонецЕсли;

	ОписаниеОбъекта.Вставить("ObjectBelonging", "Adopted");
	ЗаписатьОписаниеОбъекта(ТипОбъекта, ОписаниеОбъекта);

	Возврат Описание;
	
КонецФункции

// Добавляет в расширение существующий файл, как общий модуль
//
// Параметры:
//   ИмяМодуля - Строка - <описание параметра>
//   ПараметрыМодуля - Структура - Свойства модуля: Клиент, Сервер, ВызовСервера, ВнешнееСоединение, Привилегированный
//   ИмяФайла - Строка - Путь к добавляемому файлу
//
Процедура ДобавитьМодульОбъекта(ИмяОбъекта, ТипОбъекта, ИмяМодуля, ИмяФайла, ОписаниеОбъекта = Неопределено) Экспорт
	
    ДобавитьОбъект(ИмяОбъекта, ТипОбъекта, ОписаниеОбъекта);

	ИмяФайлаНазначения = СтруктураКаталоговПриемник.ИмяФайлаМодуля(ИмяОбъекта, ТипОбъекта, ИмяМодуля);
    КопироватьФайл(ИмяФайла, ИмяФайлаНазначения);

    Лог.Отладка("Добавлен модуль %3.%1.%2", ИмяОбъекта, ИмяМодуля, ТипОбъекта);

КонецПроцедуры

// Добавляет в расширение существующий файл, как общий модуль
//
// Параметры:
//   ИмяМодуля - Строка - <описание параметра>
//   ПараметрыМодуля - Структура - Свойства модуля: Клиент, Сервер, ВызовСервера, ВнешнееСоединение, Привилегированный
//   ИмяФайла - Строка - Путь к добавляемому файлу
//
Процедура ДобавитьОбщийМодуль(ПараметрыМодуля, ИмяФайла) Экспорт
	
	ТипОбщийМодуль = ТипыОбъектовКонфигурации.ИмяТипаОбщийМодуль();

	ДобавитьМодульОбъекта(ПараметрыМодуля.Наименование, ТипОбщийМодуль, "Module", ИмяФайла, ПараметрыМодуля);
    Лог.Отладка("Добавлен общий модуль %1", ПараметрыМодуля.Наименование);

КонецПроцедуры

// Добавляет произвольный файл в расширение, без регистрации и смс
//
// Параметры:
//   ОтносительныйПуть - Строка - Путь в рамках исходников расширения
//   ИсходныйФайл - Строка - Полный путь к добавляемому файлу
//
Процедура ДобавитьФайл(ОтносительныйПуть, ИсходныйФайл) Экспорт
    
    ПолныйПуть = ОбъединитьПути(СтруктураКаталоговПриемник.КорневойКаталог(), ОтносительныйПуть);
    Утилиты.СоздатьРекурсивноКаталоги((Новый Файл(ПолныйПуть)).Путь);
    
    КопироватьФайл(ИсходныйФайл, ПолныйПуть);
    
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Служебный функционал
///////////////////////////////////////////////////////////////////

Процедура ЗаписатьОписаниеОбъекта(ТипОбъекта, ОписаниеОбъекта)
	
	Запись = ГенераторОписаний.СоздатьЗапись(ТипОбъекта, ПараметрыГенерации);
	
	ГенераторОписаний.ЗаписатьПорождаемыеТипы(Запись, ОписаниеОбъекта.Наименование, ТипОбъекта);
	ГенераторОписаний.ЗаписатьСвойства(Запись, ТипОбъекта, ОписаниеОбъекта);
	
	ТекстОписания = ГенераторОписанийОбщий.ЗакрытьЗапись(Запись);
	
	ИмяФайла = СтруктураКаталоговПриемник.ИмяФайлаОписанияОбъекта(ОписаниеОбъекта.Наименование, ТипОбъекта);
	
	Утилиты.ЗаписатьФайл(ИмяФайла, ТекстОписания);

КонецПроцедуры


Процедура ПриСозданииОбъекта(Формат, Знач КаталогНазначения)

	Лог = ПараметрыПродукта.ПолучитьЛог();
	КаталогНазначения = (Новый Файл(КаталогНазначения)).ПолноеИмя;

	Если НЕ ФС.КаталогСуществует(КаталогНазначения) Тогда

		ФС.ОбеспечитьКаталог(КаталогНазначения);

	ИначеЕсли НЕ ФС.КаталогПустой(КаталогНазначения) Тогда
		
		Лог.Предупреждение("Каталог расширения ""%1"" не пустой. Каталог будет очищен", КаталогНазначения);
		ФС.ОбеспечитьПустойКаталог(КаталогНазначения);
		
	КонецЕсли;

    Лог.Информация("Начало генерации расширения");
    
    СтруктураКаталоговПриемник = Новый СтруктураКаталоговКонфигурации(КаталогНазначения, Формат, Истина);
	
	Если СтруктураКаталоговПриемник.ФорматВыгрузки() = "EDT" Тогда
		
		ГенераторОписаний = ГенераторОписанийEDT;
		
	Иначе
		
		ГенераторОписаний = ГенераторОписанийКонфигуратор;
		
	КонецЕсли;

	ПараметрыГенерации = ГенераторОписаний.СоздатьПараметрыГенерации("8.3.10", Истина);
	
КонецПроцедуры
