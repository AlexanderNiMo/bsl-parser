///////////////////////////////////////////////////////////////////
//
// Класс для генерации расширений
//
// (с) BIA Technologies, LLC    
//
///////////////////////////////////////////////////////////////////

#Использовать fs

///////////////////////////////////////////////////////////////////

Перем ЗаписьConfiguration;
Перем ОписаниеКонфигурации;
Перем Лог;
Перем СтруктураКаталоговПриемник;
Перем ПараметрыГенерации;
Перем ГенераторОписаний;

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

// Устанавливает свойства расширения и подготавливает генератор
//
// Параметры:
//   ИмяРасширения - Строка - Наименование расширения
//   ПредставлениеРасширения - Строка - Синоним расширения
//   ПрефиксРасширения - Строка - Префикс расширения
//
Процедура Инициализировать(ИмяРасширения, ПредставлениеРасширения, ПрефиксРасширения) Экспорт
	
	ОписаниеКонфигурации = Новый ОписаниеКонфигурации;

	ОписаниеКонфигурации.СвойстваКонфигурации = СтруктурыОписаний.СоздатьОбъект("Расширение", ИмяРасширения);
	ОписаниеКонфигурации.СвойстваКонфигурации.Синоним = ПредставлениеРасширения;
	ОписаниеКонфигурации.СвойстваКонфигурации.ПрефиксИмен = ПрефиксРасширения;
	ОписаниеКонфигурации.СвойстваКонфигурации.Принадлежность = "Adopted";
	ОписаниеКонфигурации.СвойстваКонфигурации.Назначение = "Customization";
	
	СтрокаКонфигурация = ОписаниеКонфигурации.ОбъектыКонфигурации.Добавить();
	ПустаяСтрокаОбъектКонфигурации = СтруктурыОписаний.ОписаниеОбъектаКонфигурацииЗначенияПоУмолчанию();
	
	ЗаполнитьЗначенияСвойств(СтрокаКонфигурация, ПустаяСтрокаОбъектКонфигурации);
	СтрокаКонфигурация.Тип = ТипыОбъектовКонфигурации.ИмяТипаКонфигурации();
	СтрокаКонфигурация.Наименование = СтрокаКонфигурация.Тип;
	СтрокаКонфигурация.ПутьКФайлу = СтруктураКаталоговПриемник.ИмяФайлаОписанияКонфигурации();
	СтрокаКонфигурация.Описание = ОписаниеКонфигурации.СвойстваКонфигурации;

	ЗаписьConfiguration = ГенераторОписаний.СоздатьОписаниеРасширения(ОписаниеКонфигурации.СвойстваКонфигурации, ПараметрыГенерации);
	
КонецПроцедуры

// Завершает генерацию расширения и записывает описание корневого файла(configuration.xml)
//
Процедура Зафиксировать() Экспорт
	
	ОписаниеКонфигурации.ОбъектыКонфигурации.Сортировать("Тип, Наименование");
	ТипКонфигурация = ТипыОбъектовКонфигурации.ИмяТипаКонфигурации();

	Для Каждого Стр Из ОписаниеКонфигурации.ОбъектыКонфигурации Цикл
		
		Если Стр.Тип <> ТипКонфигурация И Стр.Родитель = Неопределено Тогда
			
			ГенераторОписаний.ЗарегистрироватьОбъектВКонфигурации(Стр, ПараметрыГенерации);
			
		КонецЕсли;
		
	КонецЦикла;

    Описание = ОбработкаXML.ЗакрытьЗапись(ЗаписьConfiguration);

    Утилиты.ЗаписатьФайл(СтруктураКаталоговПриемник.ИмяФайлаОписанияКонфигурации(), Описание);

    Лог.Информация("Расширение создано");

КонецПроцедуры

// Возвращает описание конфигурации
//
//  Возвращаемое значение:
//   Структура - Описание конфигурации
//
Функция ОписаниеКонфигурации() Экспорт
	
	Возврат ОписаниеКонфигурации;

КонецФункции

Функция ДобавитьОбъект(ИмяОбъекта, Знач ТипОбъекта, ОписаниеОбъекта = Неопределено) Экспорт
	
	ОбъектКонфигурации = ДобавитьОбъектКонфигурации(ИмяОбъекта, ТипОбъекта);

	Если ОбъектКонфигурации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОписаниеОбъекта = Неопределено И ОбъектКонфигурации.Описание = Неопределено Тогда
		
		ОбъектКонфигурации.Описание = СтруктурыОписаний.СоздатьОбъект(ТипОбъекта, ИмяОбъекта);
		ЗаписатьОписаниеОбъекта(ОбъектКонфигурации, ОбъектКонфигурации.Описание);

	ИначеЕсли ОписаниеОбъекта <> Неопределено И ОбъектКонфигурации.Описание <> ОписаниеОбъекта Тогда
		
		ОбъектКонфигурации.Описание = ОписаниеОбъекта;
		ЗаписатьОписаниеОбъекта(ОбъектКонфигурации, ОбъектКонфигурации.Описание);

	КонецЕсли;

	Возврат ОбъектКонфигурации;
	
КонецФункции

// Добавляет объект базовой конфигурации в расширение
//
// Параметры:
//   ОбъектРодительскойКонфигурации - СтрокаТаблицыЗначений - Описание объекта родительской конфигурации
//
//  Возвращаемое значение:
//   СтрокаТаблицыЗначений - Описание объекта расширения
//
Функция ПеренестиОбъектВРасширение(ОбъектРодительскойКонфигурации, НеЗакрывать = Ложь) Экспорт
	
	ОбъектКонфигурации = ДобавитьОбъектКонфигурации(ОбъектРодительскойКонфигурации.Наименование, ОбъектРодительскойКонфигурации.Тип);
	
	Если ОбъектКонфигурации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СокращенноеОписание = СтруктурыОписаний.СоздатьСокращеннуюСтруктураОбъекта(ОбъектРодительскойКонфигурации.ПолноеНаименование);
	
	Если ОбъектРодительскойКонфигурации.Описание = Неопределено Тогда
		
		СокращенноеОписание.Наименование = ОбъектКонфигурации.Наименование;

	Иначе
		
		ЗаполнитьЗначенияСвойств(СокращенноеОписание, ОбъектРодительскойКонфигурации.Описание, , "Подчиненные");

	КонецЕсли;

	СокращенноеОписание.Принадлежность = "Adopted";
	
	ОбъектКонфигурации.Описание = СокращенноеОписание;
	Запись = ЗаписатьОписаниеОбъекта(ОбъектКонфигурации, ОбъектКонфигурации.Описание, НеЗакрывать);
	
	Если НеЗакрывать = Истина Тогда
		
		Возврат Запись;
		
	Иначе
		
		Возврат ОбъектКонфигурации;

	КонецЕсли;
	
КонецФункции

Процедура ПеренестиОбъектВРасширениеСПодчиненными(Объект, Атрибуты = Истина, ТабличныеЧасти = Ложь, Формы = Ложь, Команды = Ложь)
	
	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(Объект.ПутьКФайлу);
	
	Запись = ПеренестиОбъектВРасширение(Объект, Истина);
	
	Исключения = Новый Структура();
	Исключения.Вставить("standardAttributes", Истина);
	Исключения.Вставить("attributes", НЕ Атрибуты);
	Исключения.Вставить("forms", НЕ Формы);
	Исключения.Вставить("commands", НЕ Команды);
	Исключения.Вставить("tabularSections", НЕ ТабличныеЧасти);
	
	СтекИмен = Новый Соответствие();
	СтекИмен = Новый Соответствие();
	Уровень = -1;
	УровеньЗаписи = 0;
	Пропустить = Ложь;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Исключения.Свойство(Чтение.ЛокальноеИмя, Пропустить) И Пропустить Тогда

			Чтение.Пропустить();
			Продолжить;
			
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Уровень = Уровень + 1;
			СтекИмен.Вставить(Уровень, Чтение.Имя);
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Уровень = Уровень - 1;
			
			Если Уровень < УровеньЗаписи Тогда
				
				Запись.ЗаписатьКонецЭлемента();
				УровеньЗаписи = Уровень;

			КонецЕсли;

		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Уровень <> 1 И СтрСравнить(Чтение.ЛокальноеИмя, "name") = 0 Тогда
			
			Для Инд = УровеньЗаписи + 1 По Уровень Цикл
				
				Запись.ЗаписатьНачалоЭлемента(СтекИмен[Инд]);
				
			КонецЦикла;
			
			// Перейдем к значению
			Чтение.Прочитать();

			Запись.ЗаписатьТекст(Чтение.Значение);
			Запись.ЗаписатьКонецЭлемента();

			// Выйдем из тэга name
			Чтение.Прочитать();

			ОбработкаXML.ЗаписатьЗначениеXML(Запись, "objectBelonging", "Adopted");
			
			Если ОбработкаXML.ПерейтиКСледующемуЭлементу(Чтение, "type") Тогда
				
				ОбработкаXML.СкопироватьДанныеXML(Чтение, Запись);

			Иначе
				
				Запись.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			Уровень = Уровень - 1;
			УровеньЗаписи = Уровень;

		КонецЕсли;
		
	КонецЦикла;

	Чтение.Закрыть();
	Запись.Закрыть();

КонецПроцедуры

Функция СкопироватьОбъект(Объект) Экспорт

	НовыйОбъект = ДобавитьОбъект(Объект.Наименование, Объект.Тип);
	КопироватьФайл(Объект.ПутьКФайлу, НовыйОбъект.ПутьКФайлу);
	Возврат НовыйОбъект;

КонецФункции

Функция ДобавитьВнешнуюОбработку(КаталогВнешнейОбработки) Экспорт
	
	ИмяОбработки = (Новый Файл(КаталогВнешнейОбработки)).Имя;

	Обработка = ДобавитьОбъект(ИмяОбработки, ТипыОбъектовКонфигурации.НормализоватьИмя("Обработка"));
	
	Для Каждого Файл Из НайтиФайлы(КаталогВнешнейОбработки, "*", Истина) Цикл
		
		Если НЕ Файл.ЭтоФайл() Тогда
			
			Продолжить;
			
		КонецЕсли;

		ОтносительныйПуть = СтрЗаменить(Файл.ПолноеИмя, КаталогВнешнейОбработки, "");
		
		ПутьНовогоФайла = ДобавитьФайлОбъекта(Обработка, ОтносительныйПуть, Файл.ПолноеИмя);
		
		Если Файл.Расширение = ".mdo" ИЛИ Файл.Расширение = ".form" Тогда
			
			Текст = Утилиты.ПрочитатьФайл(ПутьНовогоФайла);
			Текст = СтрЗаменить(Текст, "ExternalDataProcessor", "DataProcessor");
			
			Утилиты.ЗаписатьФайл(ПутьНовогоФайла, Текст);
			
		ИначеЕсли СтрСравнить(Файл.Расширение, ".bsl") Тогда
			
			Текст = Утилиты.ПрочитатьФайл(ПутьНовогоФайла);
			Текст = СтрЗаменить(Текст, "ВнешнаяОбработка", "Обработка");
			
			Утилиты.ЗаписатьФайл(ПутьНовогоФайла, Текст);

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Обработка;
	
КонецФункции



// Добавляет в расширение существующий файл, как общий модуль
//
// Параметры:
//   ИмяМодуля - Строка - <описание параметра>
//   ПараметрыМодуля - Структура - Свойства модуля: Клиент, Сервер, ВызовСервера, ВнешнееСоединение, Привилегированный
//   ИмяФайла - Строка - Путь к добавляемому файлу
//
Процедура ДобавитьМодульОбъекта(ОбъектКонфигурации, ИмяМодуля, ИмяФайла) Экспорт
	
	ИмяФайлаНазначения = СтруктураКаталоговПриемник.ИмяФайлаМодуля(ОбъектКонфигурации.Наименование, ОбъектКонфигурации.Тип, ИмяМодуля);
	
	КопироватьФайл(ИмяФайла, ИмяФайлаНазначения);

    Лог.Отладка("Добавлен модуль %3.%1.%2", ОбъектКонфигурации.Наименование, ИмяМодуля, ОбъектКонфигурации.Тип);

КонецПроцедуры

// Добавляет в расширение существующий файл, как общий модуль
//
// Параметры:
//   ИмяМодуля - Строка - <описание параметра>
//   ПараметрыМодуля - Структура - Свойства модуля: Клиент, Сервер, ВызовСервера, ВнешнееСоединение, Привилегированный
//   ИмяФайла - Строка - Путь к добавляемому файлу
//
Процедура ДобавитьОбщийМодуль(ПараметрыМодуля, ИмяФайла) Экспорт
	
	ТипОбщийМодуль = ТипыОбъектовКонфигурации.ИмяТипаОбщийМодуль();

	ОбъектКонфигурации = ДобавитьОбъект(ПараметрыМодуля.Наименование, ТипОбщийМодуль, ПараметрыМодуля);

	ДобавитьМодульОбъекта(ОбъектКонфигурации, "Module", ИмяФайла);

КонецПроцедуры

// Добавляет модуль конфигурации (модуль сеанса, приложения и т.д.)
//
// Параметры:
//   ИмяМодуля - Строка - Тип модуля
//   ИмяФайла - Строка - Имя файла содержащего текст модуля
//
Процедура ДобавитьМодульКонфигурации(ИмяМодуля, ИмяФайла) Экспорт
	
	ИмяФайлаНазначения = СтруктураКаталоговПриемник.ИмяФайлаМодуля("Configuration", "Configuration", ИмяМодуля);
	
	КопироватьФайл(ИмяФайла, ИмяФайлаНазначения);

    Лог.Отладка("Добавлен модуль конфигурации %1", ИмяМодуля);

КонецПроцедуры

// Добавляет произвольный файл в расширение, без регистрации и смс
//
// Параметры:
//   ОтносительныйПуть - Строка - Путь в рамках исходников расширения
//   ИсходныйФайл - Строка - Полный путь к добавляемому файлу
//
Процедура ДобавитьФайл(ОтносительныйПуть, ИсходныйФайл) Экспорт
    
    ПолныйПуть = ОбъединитьПути(СтруктураКаталоговПриемник.КорневойКаталог(), ОтносительныйПуть);
    Утилиты.СоздатьРекурсивноКаталоги((Новый Файл(ПолныйПуть)).Путь);
    
    КопироватьФайл(ИсходныйФайл, ПолныйПуть);
    
КонецПроцедуры

// Добавляет произвольный файл в расширение, без регистрации и смс
//
// Параметры:
//   ОтносительныйПуть - Строка - Путь в рамках исходников расширения
//   ИсходныйФайл - Строка - Полный путь к добавляемому файлу
//
Функция ДобавитьФайлОбъекта(Объект, ОтносительныйПуть, ИсходныйФайл) Экспорт
    
    ПолныйПуть = ОбъединитьПути(Объект.ПутьККаталогу, ОтносительныйПуть);
	Утилиты.СоздатьРекурсивноКаталоги((Новый Файл(ПолныйПуть)).Путь);
	
	КопироватьФайл(ИсходныйФайл, ПолныйПуть);
	
	Возврат ПолныйПуть;
    
КонецФункции

Функция СоздатьЗаписьОписания(ТипОбъекта, ИмяФайла) Экспорт
	
	Возврат ГенераторОписаний.СоздатьЗапись(ТипОбъекта, ПараметрыГенерации, ИмяФайла);
	
КонецФункции
///////////////////////////////////////////////////////////////////
// Служебный функционал
///////////////////////////////////////////////////////////////////

Функция ЗаписатьОписаниеОбъекта(ОбъектКонфигурации, ДанныеОбъекта, НеЗакрывать = Ложь)
	
	ИмяФайла = СтруктураКаталоговПриемник.ИмяФайлаОписанияОбъекта(ОбъектКонфигурации.Наименование, ОбъектКонфигурации.Тип);

	Запись = СоздатьЗаписьОписания(ОбъектКонфигурации.Тип, ИмяФайла);
	
	ОписаниеСвойств = СтруктурыОписаний.ОписаниеСвойствОбъекта(ОбъектКонфигурации.Тип);

	ГенераторОписаний.ЗаписатьПорождаемыеТипы(Запись, ДанныеОбъекта.Наименование, ОбъектКонфигурации.Тип);
	ГенераторОписаний.ЗаписатьСвойства(Запись, ОбъектКонфигурации.Тип, ДанныеОбъекта);
	
	Если ОписаниеСвойств.ЕстьПодчиненные Тогда
		
		ГенераторОписаний.Подчиненные(Запись, ?(ДанныеОбъекта.Свойство("Подчиненные"), ДанныеОбъекта.Подчиненные, Неопределено));
		
	КонецЕсли;
	
	Если НеЗакрывать = Истина Тогда
		
		Возврат Запись;
		
	Иначе
		
		ОбработкаXML.ЗакрытьЗапись(Запись);
		
	КонецЕсли;
	
КонецФункции

Функция ДобавитьОбъектКонфигурации(ИмяОбъекта, Знач ТипОбъекта)
	
	ТипОбъекта = ТипыОбъектовКонфигурации.НормализоватьИмя(ТипОбъекта);
	
	Если ТипОбъекта = ТипыОбъектовКонфигурации.ИмяТипаКонфигурации() Тогда
		Возврат Неопределено;
	КонецЕсли;

	НайденныеОбъекты = ОписаниеКонфигурации.ОбъектыКонфигурации.НайтиСтроки(Новый Структура("Наименование, Тип", ИмяОбъекта, ТипОбъекта));
	
	Если НайденныеОбъекты.Количество() Тогда
		
		ОбъектКонфигурации = НайденныеОбъекты[0];
		
	Иначе
		
		ОбъектКонфигурации = ОписаниеКонфигурации.ОбъектыКонфигурации.Добавить();
		
		ОбъектКонфигурации.Наименование = ИмяОбъекта;
		ОбъектКонфигурации.Тип = ТипОбъекта;
		ОбъектКонфигурации.ПутьКФайлу = СтруктураКаталоговПриемник.ИмяФайлаОписанияОбъекта(ИмяОбъекта, ТипОбъекта);
		ОбъектКонфигурации.ПутьККаталогу = СтруктураКаталоговПриемник.КаталогФайловОбъекта(ИмяОбъекта, ТипОбъекта);
		
	КонецЕсли;

	Возврат ОбъектКонфигурации;

КонецФункции

Процедура ПриСозданииОбъекта(Формат, Знач КаталогНазначения)

	Лог = ПараметрыПродукта.ПолучитьЛог();
	КаталогНазначения = (Новый Файл(КаталогНазначения)).ПолноеИмя;

	Если НЕ ФС.КаталогСуществует(КаталогНазначения) Тогда

		ФС.ОбеспечитьКаталог(КаталогНазначения);

	ИначеЕсли НЕ ФС.КаталогПустой(КаталогНазначения) Тогда
		
		Лог.Предупреждение("Каталог расширения ""%1"" не пустой. Каталог будет очищен", КаталогНазначения);
		ФС.ОбеспечитьПустойКаталог(КаталогНазначения);
		
	КонецЕсли;

    Лог.Информация("Начало генерации расширения");
    
    СтруктураКаталоговПриемник = Новый СтруктураКаталоговКонфигурации(КаталогНазначения, Формат, Истина);
	
	Если СтруктураКаталоговПриемник.ФорматВыгрузки() = ФорматыВыгрузки.EDT Тогда
		
		ГенераторОписаний = ГенераторОписанийEDT;
		
	Иначе
		
		ГенераторОписаний = ГенераторОписанийКонфигуратор;
		
	КонецЕсли;

	ПараметрыГенерации = ГенераторОписаний.СоздатьПараметрыГенерации("8.3.10", Истина);
	
КонецПроцедуры
