///////////////////////////////////////////////////////////////////
//
// Модуль помощник, для генерации описаний метаданных 1с
//
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////

// Формирует служебные параметры необходимые для дальнейшей работы генератора
//
// Параметры:
//   ВерсияПлатформы - Строка - Версия платформы 1с под которую создается описание
//   ГенерацияРасширения - Булево - Флаг создания расширения
//
//  Возвращаемое значение:
//   Структура - Служебные параметры генератора
//
Функция СоздатьПараметрыГенерации(ВерсияПлатформы, ГенерацияРасширения) Экспорт
	
	Если Лев(ВерсияПлатформы, 6) = "8.3.10" Тогда
		
		ВерсияВыгрузки = "2.4";
		
	Иначе
		
		ВызватьИсключение "Неизвестная версия платформы";
		
	КонецЕсли;
	
	ПараметрыГенерации = Новый Структура();
	ПараметрыГенерации.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	ПараметрыГенерации.Вставить("ВерсияВыгрузки", ВерсияВыгрузки);
	ПараметрыГенерации.Вставить("ГенерацияРасширения", ГенерацияРасширения = Истина);
	
	Возврат ПараметрыГенерации;
	
КонецФункции

// Метод создает базовое описание расширения, в которое потом можно добавлять объекты и т.д.
//
// Параметры:
//   Имя - Строка - Имя расширения
//
Функция СоздатьОписаниеРасширения(ОписаниеРасширения, ПараметрыГенерации) Экспорт
	
	ЗаписьConfiguration = СоздатьЗапись("Configuration", ПараметрыГенерации);
	
	ЗаписьConfiguration.ЗаписатьНачалоЭлемента("InternalInfo");
	
	Для Каждого uid из ГенераторОписанийОбщий.ПолучитьUIDДляГенерацииРасширения() Цикл
		
		ЗаписьConfiguration.ЗаписатьНачалоЭлемента("xr:ContainedObject");
		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(ЗаписьConfiguration, "xr:ClassId", uid);
		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(ЗаписьConfiguration, "xr:ObjectId", Строка(Новый УникальныйИдентификатор()));
		ЗаписьConfiguration.ЗаписатьКонецЭлемента(); // xr:ContainedObject
		
	КонецЦикла;
	
	ЗаписьConfiguration.ЗаписатьКонецЭлемента(); // InternalInfo
	
	ЗаписатьСвойства(ЗаписьConfiguration, "Расширение", ОписаниеРасширения);
	
	ЗаписьConfiguration.ЗаписатьНачалоЭлемента("ChildObjects");
	
	ПараметрыГенерации.Вставить("ЗаписьConfiguration", ЗаписьConfiguration);
	
	Возврат ЗаписьConfiguration;

КонецФункции

Процедура ЗаписатьСвойства(Запись, ТипОбъекта, СвойстваОбъекта) Экспорт
	
	Запись.ЗаписатьНачалоЭлемента("Properties");
	
	ГенераторОписанийОбщий.ЗаписатьДанные(Запись, СвойстваОбъекта, ТипОбъекта, ЭтотОбъект);
	
	Запись.ЗаписатьКонецЭлемента(); // Properties
	
КонецПроцедуры

// Метод регистрирует в конфигурации объект метаданных.
// Проверок на существование объекта нет
//
// Параметры:
//   ИмяМетаданного - Строка - Имя регистрируемого метаданного, например, Пользователи
//   ВидМетаданного - Строка - Вид регистрируемого метаданного, например, Catalog
//
Процедура ЗарегистрироватьОбъектВКонфигурации(ИмяМетаданного, ВидМетаданного, ПараметрыГенерации) Экспорт
	
	ГенераторОписанийОбщий.ЗаписатьЗначениеXML(ПараметрыГенерации.ЗаписьConfiguration, ВидМетаданного, ИмяМетаданного);
	
КонецПроцедуры

Процедура ЗаписатьПорождаемыеТипы(Запись, ИмяОбъекта, ТипОбъекта) Экспорт
	
	ПорождаемыеТипы = ТипыОбъектовКонфигурации.ОписаниеТипаПоИмени(ТипОбъекта).ПорождаемыеТипы;

	Если ПорождаемыеТипы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запись.ЗаписатьНачалоЭлемента("InternalInfo");
	
	Если ТипОбъекта = ТипыОбъектовКонфигурации.ИмяТипаПланОбмена() Тогда

		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, "xr:ThisNode", Строка(Новый УникальныйИдентификатор()));
		
	КонецЕсли;

	Для Каждого Тип Из ПорождаемыеТипы Цикл
		
		Запись.ЗаписатьНачалоЭлемента("xr:GeneratedType");
		// TODO Есть типы исключения у которых имя формируется по-другому
		Запись.ЗаписатьАтрибут("name", СтрШаблон("%1%2.%3", ТипОбъекта, Тип, ИмяОбъекта));
		Запись.ЗаписатьАтрибут("category", Тип);
		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, "xr:TypeId", Строка(Новый УникальныйИдентификатор()));
		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, "xr:ValueId", Строка(Новый УникальныйИдентификатор()));
		Запись.ЗаписатьКонецЭлемента();
	
	КонецЦикла;

	Запись.ЗаписатьКонецЭлемента();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

#Область МетодыЗаписиЗначений

Процедура МногоязычнаяСтрока(Запись, Значение) Экспорт

	Запись.ЗаписатьНачалоЭлемента("v8:item");
	ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, "v8:lang", "ru");
	ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, "v8:content", Значение);
	Запись.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ЗначениеБулево(Запись, Значение) Экспорт

	Запись.ЗаписатьТекст(XMLСтрока(Значение));

КонецПроцедуры

Процедура СоставПодсистемы(Запись, Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПолноеИмяЭлемента Из Значение Цикл
		
		ЧастиИмени = СтрРазделить(ПолноеИмяЭлемента, ".");
		
		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, ЧастиИмени[0], ЧастиИмени[1]);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Подчиненные(Запись, Значение) Экспорт
	
	Запись.ЗаписатьНачалоЭлемента("ChildObjects");

	Для Каждого ПолноеИмяЭлемента Из Значение Цикл
		
		ЧастиИмени = СтрРазделить(ПолноеИмяЭлемента, ".");
		
		ГенераторОписанийОбщий.ЗаписатьЗначениеXML(Запись, ЧастиИмени[0], ЧастиИмени[1]);
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////

// Создает xml запись описания объекта, прописывает базовые параметры
//
// Параметры:
//   ТипОбъекта - Строка - Тип объекта конфигурации на английском, например, Catalog, Configuration и т.д.
//
//  Возвращаемое значение:
//   ЗаписьXML- Поток записи описания
//
Функция СоздатьЗапись(ТипОбъекта, ПараметрыГенерации) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.Отступ = Ложь;
	Запись.УстановитьСтроку("UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("MetaDataObject");
	Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.3/MDClasses");
	Запись.ЗаписатьСоответствиеПространстваИмен("app", "http://v8.1c.ru/8.2/managed-application/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("cfg", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	Запись.ЗаписатьСоответствиеПространстваИмен("cmi", "http://v8.1c.ru/8.2/managed-application/cmi");
	Запись.ЗаписатьСоответствиеПространстваИмен("ent", "http://v8.1c.ru/8.1/data/enterprise");
	Запись.ЗаписатьСоответствиеПространстваИмен("lf", "http://v8.1c.ru/8.2/managed-application/logform");
	Запись.ЗаписатьСоответствиеПространстваИмен("style", "http://v8.1c.ru/8.1/data/ui/style");
	Запись.ЗаписатьСоответствиеПространстваИмен("sys", "http://v8.1c.ru/8.1/data/ui/fonts/system");
	Запись.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("v8ui", "http://v8.1c.ru/8.1/data/ui");
	Запись.ЗаписатьСоответствиеПространстваИмен("web", "http://v8.1c.ru/8.1/data/ui/colors/web");
	Запись.ЗаписатьСоответствиеПространстваИмен("win", "http://v8.1c.ru/8.1/data/ui/colors/windows");
	Запись.ЗаписатьСоответствиеПространстваИмен("xen", "http://v8.1c.ru/8.3/xcf/enums");
	Запись.ЗаписатьСоответствиеПространстваИмен("xpr", "http://v8.1c.ru/8.3/xcf/predef");
	Запись.ЗаписатьСоответствиеПространстваИмен("xr", "http://v8.1c.ru/8.3/xcf/readable");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	Запись.ЗаписатьАтрибут("version", ПараметрыГенерации.ВерсияВыгрузки);
	Запись.ЗаписатьНачалоЭлемента(ТипОбъекта);
	Запись.ЗаписатьАтрибут("uuid", Строка(Новый УникальныйИдентификатор()));
	
	Возврат Запись;
	
КонецФункции

// Закрывает запись описания объекта и всех открытых тэгов
//
// Параметры:
//   Запись - ЗаписьXML - запись описания объекта
//
//  Возвращаемое значение:
//   Строка - XML описание объекта
//
Функция ЗакрытьЗапись(Запись)
	
	Возврат	ГенераторОписанийОбщий.ЗакрытьЗапись(Запись);
	
КонецФункции

Процедура СкопироватьInternalInfo(Запись, ИсходноеОписание)
	
	Чтение = Новый ЧтениеXML();
	Чтение.УстановитьСтроку(ИсходноеОписание);
	
	Переносим = Ложь;
	
	Пока Чтение.Прочитать() И Чтение.Имя <> "InternalInfo" Цикл // Ищем секцию InternalInfo
		
	КонецЦикла;
	
	Если Чтение.Имя <> "InternalInfo" Тогда // Не нашли секцию
		
		Возврат;
		
	КонецЕсли;
	
	Запись.ЗаписатьНачалоЭлемента("InternalInfo");
	
	Пока Чтение.Прочитать() И Чтение.Имя <> "InternalInfo" Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Запись.ЗаписатьТекст(Строка(Новый УникальныйИдентификатор()));
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Запись.ЗаписатьНачалоЭлемента(Чтение.Имя);
			
			Пока Чтение.СледующийАтрибут() Цикл
				
				Запись.ЗаписатьАтрибут(Чтение.Имя, Чтение.Значение);
				
			КонецЦикла;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Запись.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Запись.ЗаписатьКонецЭлемента(); // InternalInfo
	
КонецПроцедуры

