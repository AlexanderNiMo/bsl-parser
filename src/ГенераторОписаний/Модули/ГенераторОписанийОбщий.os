///////////////////////////////////////////////////////////////////////////////
//
// Модуль помощник по генерации файлов описаний 1с
//
///////////////////////////////////////////////////////////////////////////////

Перем Рефлектор;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

// Список предопределенных UIDов необходимых для создания файла описания
//
//  Возвращаемое значение:
//   Массив - Список UIDов
//
Функция ПолучитьUIDДляГенерацииРасширения() Экспорт
	
    UIDы = Новый Массив();
    UIDы.Добавить("9cd510cd-abfc-11d4-9434-004095e12fc7");
    UIDы.Добавить("9fcd25a0-4822-11d4-9414-008048da11f9");
    UIDы.Добавить("e3687481-0a87-462c-a166-9f34594f9bba");
    UIDы.Добавить("9de14907-ec23-4a07-96f0-85521cb6b53b");
    UIDы.Добавить("51f2d5d8-ea4d-4064-8892-82951750031e");
	UIDы.Добавить("e68182ea-4237-4383-967f-90c1e3370bc7");
	
	Возврат UIDы;
	
КонецФункции

Функция ЗаписатьДанные(Запись, Данные, ТипОбъекта, Генератор) Экспорт
	
	ФорматEDT = Генератор = ГенераторОписанийEDT;
	ПараметрыЗаписи = ПараметрыСериализации.ПараметрыЗаписи(ТипОбъекта, ?(ФорматEDT, ФорматыВыгрузки.EDT, ФорматыВыгрузки.Конфигуратор_8_3_10));
		
	АргументыПреобразования = Новый Массив(2);
	АргументыПреобразования[0] = Запись;
	
	Если Данные.Свойство("Принадлежность") И Данные.Принадлежность = Неопределено Тогда
		
		Данные.Удалить("Принадлежность");

	КонецЕсли;
	
	Для Каждого Элемент Из ПараметрыЗаписи.Свойства Цикл
		
		Значение = Неопределено;

		Если НЕ Данные.Свойство(Элемент.Ключ, Значение) ИЛИ Значение = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОписаниеСвойства = Элемент.Значение;
		
		Если ПустаяСтрока(ОписаниеСвойства.МетодПреобразования) Тогда
			
			ОбработкаXML.ЗаписатьЗначениеXML(Запись, ОписаниеСвойства.Поле, Значение);
			
		Иначе
			
			Запись.ЗаписатьНачалоЭлемента(ОписаниеСвойства.Поле);

			АргументыПреобразования[1] = Значение;

			Рефлектор.ВызватьМетод(Генератор, ОписаниеСвойства.МетодПреобразования, АргументыПреобразования);
			
			Запись.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

Рефлектор = Новый Рефлектор();