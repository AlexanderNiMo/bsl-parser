///////////////////////////////////////////////////////////////////////////////
//
// Модуль для чтения описаний метаданных 1с из EDT выгрузки
//
///////////////////////////////////////////////////////////////////////////////

#Использовать reflector

///////////////////////////////////////////////////////////////////////////////

Перем Рефлектор;
Перем РегулярныеВыражения;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

// Выполняет чтение описания объекта с учетом параметров
//
// Параметры:
//   ТекстОписания - Строка - Описание объекта
//   ПараметрыЧтения - Структура - Настройки обработки полей
//
//  Возвращаемое значение:
//   Структура - Данные описания
//
Функция ПолучитьСвойства(ТекстОписания, ПараметрыЧтения = Неопределено) Экспорт
	
	СвойстваОписания = Новый Структура();

	НайденныеСовпадения = РегулярныеВыражения.СвойстваОписания.НайтиСовпадения(ТекстОписания);
	
	Для Каждого Совпадение Из НайденныеСовпадения Цикл
		
		Имя = Совпадение.Группы[1].Значение;
		Значение = Совпадение.Группы[2].Значение;
		
		Если СвойстваОписания.Свойство(Имя) Тогда
			
			Если ТипЗнч(СвойстваОписания[Имя]) = Тип("Массив") Тогда
				
				СвойстваОписания[Имя].Добавить(Значение);
				
			Иначе

				КоллекцияЗначений = Новый Массив();
				КоллекцияЗначений.Добавить(СвойстваОписания[Имя]);
				КоллекцияЗначений.Добавить(Значение);
	
				СвойстваОписания.Вставить(Имя, КоллекцияЗначений);

			КонецЕсли;
			
		Иначе
			
			СвойстваОписания.Вставить(Имя, Значение);

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыЧтения <> Неопределено Тогда
		
		СвойстваОписания = ВыполнитьОбработкуПрочитанныхСвойств(СвойстваОписания, ПараметрыЧтения, ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат СвойстваОписания;
	
КонецФункции

// Выполняет чтение описания объекта с учетом параметров
//
// Параметры:
//   ИмяФайла - Строка - Путь к файлу описания
//   ПараметрыЧтения - Структура - Настройки обработки полей
//
//  Возвращаемое значение:
//   Структура - Данные описания
//
Функция ПрочитатьСвойстваИзФайла(ИмяФайла, ПараметрыЧтения = Неопределено) Экспорт
	
	ТекстОписания = Утилиты.ПрочитатьФайл(ИмяФайла);
	
	Возврат ПолучитьСвойства(ТекстОписания, ПараметрыЧтения);

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

#Область МетодыЧтения
// Читает строку на разных языках
//
// Параметры:
//   Значение - Строка - Данные содержащие строку на разных языках
//
//  Возвращаемое значение:
//   Строка - Данные строки
//
Функция МногоязычнаяСтрока(Знач Значение) Экспорт
	
	Регулярка = РегулярныеВыражения.МногоязычнаяСтрока;
	Совпадения = Регулярка.НайтиСовпадения(Значение);
	
	Если Совпадения.Количество() Тогда
		
		Значение = Совпадения[0].Группы[1].Значение;
		
	Иначе
		
		Значение = "";
		
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

// Читает описание типа
//
// Параметры:
//   Значение - Строка - Данные содержащие описание типа
//
//  Возвращаемое значение:
//   Строка - Значение типа
//
Функция ПолучитьТип(Знач Значение) Экспорт
	
	Регулярка = РегулярныеВыражения.ПолучитьТип;
	Совпадения = Регулярка.НайтиСовпадения(Значение);
	
	Если Совпадения.Количество() Тогда
		
		Значение = Совпадения[0].Группы[1].Значение;
		
	Иначе
		
		Значение = "";
		
	КонецЕсли;
	
	Возврат ЧтениеОписанийБазовый.ПреобразоватьТип(Значение);

КонецФункции

Функция ЗначениеБулево(Знач Значение) Экспорт
	
	Возврат СтрСравнить(Значение, "true") = 0;
	
КонецФункции

// Читает состав подсистемы
//
// Параметры:
//   Значение - Строка - Данные содержащие элемент состава
//
//  Возвращаемое значение:
//   Массив - Состав подсистемы
//
Функция СоставПодсистемы(Знач Значение) Экспорт

	Возврат Значение;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

Функция ВыполнитьОбработкуПрочитанныхСвойств(СырыеДанные, ПараметрыЧтения, ОбъектПреобразователь)
	
	СвойстваОписания = Новый Структура();
	
	Для Каждого Параметр Из ПараметрыЧтения Цикл
		
		Значение = Неопределено;
		
		Если НЕ СырыеДанные.Свойство(Параметр.Значение.Поле, Значение) Тогда
			
			Значение = "";
			
		КонецЕсли;

		Значение = ОбработатьСвойство(Значение, Параметр.Значение, ОбъектПреобразователь);

		СвойстваОписания.Вставить(Параметр.Ключ, Значение);
		
	КонецЦикла;
	
	Возврат СвойстваОписания;
	
КонецФункции

Функция ОбработатьСвойство(Значение, Параметр, ОбъектПреобразователь)
	
	Если ПустаяСтрока(Значение) И Параметр.Коллекция Тогда
		
		Возврат Новый Массив();
		
	ИначеЕсли ПустаяСтрока(Значение) Тогда
		
		Возврат Значение;
		
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Массив") И ПустаяСтрока(Параметр.МетодПреобразования) И НЕ Параметр.Многоязычный Тогда
		
		Возврат Значение;
		
	КонецЕсли;
	
	МетодПреобразования = Параметр.МетодПреобразования;
		
	Если НЕ ЗначениеЗаполнено(МетодПреобразования) И Параметр.Многоязычный Тогда
		
		МетодПреобразования = "МногоязычнаяСтрока";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетодПреобразования) Тогда
		
		ЗначениеВМассиве = Новый Массив();
		ЗначениеВМассиве.Добавить(Значение);

		Значение = Рефлектор.ВызватьМетод(ОбъектПреобразователь, МетодПреобразования, ЗначениеВМассиве);
		
	КонецЕсли;
	
	Если Параметр.Коллекция И ТипЗнч(Значение) <> Тип("Массив") Тогда
		
		Результат = Новый Массив();
		Результат.Добавить(Значение);
		Значение = Результат;

	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Рефлектор = Новый Рефлектор;


РегулярныеВыражения = Новый Структура();
РегулярныеВыражения.Вставить("СвойстваОписания", Новый РегулярноеВыражение("<([a-zA-Z]+)\b[^>]*>([\s\S]*?)<\/\1>"));
РегулярныеВыражения.Вставить("МногоязычнаяСтрока", Новый РегулярноеВыражение("<value>([\s\S]*)<\/value>"));
РегулярныеВыражения.Вставить("ПолучитьТип", Новый РегулярноеВыражение("<types>([\s\S]*)<\/types>"));