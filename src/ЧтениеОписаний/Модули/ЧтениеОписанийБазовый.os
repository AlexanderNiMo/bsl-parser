///////////////////////////////////////////////////////////////////////////////
//
// Общие методы чтения файлов описаний
//
///////////////////////////////////////////////////////////////////////////////

Перем Рефлектор;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

// Возвращает полное наименование объекта конфигурации или модуля
//
// Параметры:
//   СтрокаОбъект - СтрокаТаблицыЗначений - Описание объекта или модуля конфигурации
//   ДобавлятьПрефиксДляОбщихМодулей - Булево - Признак, добавлять ли тип объекта для общих модулей
//
//  Возвращаемое значение:
//   Строка - Полное имя
//
Функция ПолноеИмяОбъекта(СтрокаМодуль, ДобавлятьПрефиксДляОбщихМодулей = Истина) Экспорт
	
	Если Утилиты.ПеременнаяСодержитСвойство(СтрокаМодуль, "ТипМодуля") Тогда // Передано описание модуля
		
		Если СтрокаМодуль.ТипМодуля <> ТипМодуля.ОбщийМодуль ИЛИ ДобавлятьПрефиксДляОбщихМодулей Тогда

			Возврат ТипыОбъектовКонфигурации.ПолучитьИмяТипаНаРусском(СтрокаМодуль.Родитель.Тип) + "." + СтрокаМодуль.Родитель.Наименование;

		Иначе
		
			Возврат СтрокаМодуль.Родитель.Наименование;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТипыОбъектовКонфигурации.ПолучитьИмяТипаНаРусском(СтрокаМодуль.Тип) + "." + СтрокаМодуль.Наименование;
		
	КонецЕсли;

КонецФункции

// Возвращает объект на основании считанных из описания данных
//
// Параметры:
//   СырыеДанные - ТаблицаЗначений - Считанные из файла описаний данные
//   ПараметрыЧтения - Структура - Описание трансформации данных описания в объект. См. ПараметрыСериализации.ПараметрыСериализации
//
//  Возвращаемое значение:
//   Структура - Данные объекта
//
Функция ОбработатьСырыеДанные(СырыеДанные, ПараметрыЧтения) Экспорт
	
	ДанныеОбъекта = СтруктурыОписаний.СоздатьСтруктураОбъекта(ПараметрыЧтения.Тип);

	Для Каждого Запись Из СырыеДанные Цикл
		
		Параметр = Неопределено;
		
		Если НЕ ПараметрыЧтения.Свойства.Свойство(Запись.Ключ, Параметр) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Параметр.ЭтоКоллекция Тогда

			ДанныеОбъекта[Параметр.Наименование].Добавить(Запись.Значение);
			
		Иначе
			
			ДанныеОбъекта[Параметр.Наименование] = Запись.Значение;

		КонецЕсли;
				
	КонецЦикла;

	Возврат ДанныеОбъекта;
	
КонецФункции

// Выполняет чтение данных описания
//
// Параметры:
//   ЧтениеXML - ЧтениеXML - Читатель данных
//   ПараметрыЧтения - Структура - Описание трансформации данных описания в объект. См. ПараметрыСериализации.ПараметрыСериализации
//   Читатель - Модуль - Модуль реализующий интерфейс преобразования данных
//
//  Возвращаемое значение:
//   ТаблицаЗначений - Значения свойств описания объекта
//
Функция ПрочитатьСвойстваXML(ЧтениеXML, ПараметрыЧтения, Читатель) Экспорт
	
	ПараметрыПреобразования = ПараметрыПреобразованияПриЧтении(ПараметрыЧтения, Читатель);
	
	УровеньКорня = ЧтениеXML.КонтекстПространствИмен.Глубина - 1; // Окончание элемента, которое нам нужно поймать имеет уровень -1 от текущего
	ИмяКорня = ЧтениеXML.ЛокальноеИмя;
	
	Значения = Новый ТаблицаЗначений();
	Значения.Колонки.Добавить("Ключ");
	Значения.Колонки.Добавить("Значение");

	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ИмяКорня = ЧтениеXML.ЛокальноеИмя И УровеньКорня = ЧтениеXML.КонтекстПространствИмен.Глубина Тогда
			Прервать;
		КонецЕсли;
		
		Если УровеньКорня >= ЧтениеXML.КонтекстПространствИмен.Глубина Тогда
			ВызватьИсключение "Ошибка чтения свойств. Ошибка алгоритма преобразования";
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;

		КлючСвойства = ЧтениеXML.ЛокальноеИмя;
		
		Если ПараметрыПреобразования.Свойство(КлючСвойства) Тогда
			
			Значение = ПреобразоватьЗначение(ЧтениеXML, ПараметрыПреобразования[КлючСвойства], Читатель);
			
		Иначе

			ЧтениеXML.Прочитать();
			
			Если ЧтениеXML.ИмеетЗначение Тогда

				Значение = ЧтениеXML.Значение;
				ЧтениеXML.Прочитать();
				
			Иначе
				
				Пока УровеньКорня + 1 <> ЧтениеXML.КонтекстПространствИмен.Глубина Цикл
					ЧтениеXML.Пропустить();
				КонецЦикла;

				Продолжить;

			КонецЕсли;

		КонецЕсли;
		
		ЗаписьЗначения = Значения.Добавить();
		ЗаписьЗначения.Ключ = КлючСвойства;
		ЗаписьЗначения.Значение = Значение;
		
	КонецЦикла;

	Возврат Значения;
	
КонецФункции

// Читает значение вложенного элемента
//
// Параметры:
//   ЧтениеXML - ЧтениеXML - Читатель данных
//
//  Возвращаемое значение:
//   Произвольный - Данные вложенного элемента
//
Функция ЗначениеВложенногоТэга(Знач ЧтениеXML, ИмяТега) Экспорт
	
	Имя = ЧтениеXML.Имя;

	Пока ЧтениеXML.Имя <> ИмяТега Цикл
		
		Если ЧтениеXML.Имя = Имя И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Возврат "";
			
		КонецЕсли;

		ЧтениеXML.Прочитать();
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	Значение = ЧтениеXML.Значение;
	
	ЧтениеXML.Прочитать();

	Возврат Значение;

КонецФункции

// Формирует привычное имя типа из XML описания
//
// Параметры:
//   ТипИзXML - Строка- Имя типа XML
//
//  Возвращаемое значение:
//   Строка - Дружелюбное имя
//
Функция ПреобразоватьТип(ТипИзXML) Экспорт

	// TODO: Проверить для EDT
	СоответствиеТипов = Новый Соответствие;

	СоответствиеТипов.Вставить("xs:boolean", "Булево");
	СоответствиеТипов.Вставить("xs:decimal", "Число");
	СоответствиеТипов.Вставить("xs:string", "Строка");
	СоответствиеТипов.Вставить("xs:dateTime", "Дата");
	СоответствиеТипов.Вставить("v8:ValueStorage", "Хранилище Значений");
	СоответствиеТипов.Вставить("v8:UUID", "UUID");
	СоответствиеТипов.Вставить("v8:Null", "Null");

	Если СтрНачинаетсяС(ТипИзXML, "xs") Или СтрНачинаетсяС(ТипИзXML, "v8") Тогда
	
		ПреобразованныйТип = СоответствиеТипов[ТипИзXML];
	
	ИначеЕсли СтрНачинаетсяС(ТипИзXML, "cfg:") Тогда

		ТипИзXML = СтрЗаменить(ТипИзXML, "cfg:", "");
		ЧастиТипа = СтрРазделить(ТипИзXML, ".");
		ТипОбъекта = СтрЗаменить(ЧастиТипа[0], "Ref", "");

		ПреобразованныйТип = ТипыОбъектовКонфигурации.ПолучитьИмяТипаНаРусском(ТипОбъекта) + "." + ЧастиТипа[1];

	Иначе

		ПреобразованныйТип = ТипИзXML;

	КонецЕсли;

	Возврат ПреобразованныйТип;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

// Формирует параметры для кастомного преобразования данных.
//
// Параметры:
//   ПараметрыЧтения - Структура - Описание трансформации данных описания в объект. См. ПараметрыСериализации.ПараметрыСериализации
//   Читатель - Модуль - Модуль реализующий интерфейс преобразования данных
//
//  Возвращаемое значение:
//   Структура - Параметры преобразования
//
Функция ПараметрыПреобразованияПриЧтении(ПараметрыЧтения, Читатель) Экспорт
	
	ОбработчикиПолей = Новый Структура();
	
	Для Каждого Элемент Из ПараметрыЧтения.Свойства Цикл
		
		Параметр = Элемент.Значение;

		Если НЕ ПустаяСтрока(Параметр.МетодПреобразования) И Рефлектор.МетодСуществует(Читатель, Параметр.МетодПреобразования) Тогда
			
			ОбработчикиПолей.Вставить(ВРег(Параметр.Поле), Параметр.МетодПреобразования);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ОбработчикиПолей;
	
КонецФункции // ОбработчикиПреобразований

Функция ПреобразоватьЗначение(ЧтениеXML, МетодПреобразования, Читатель)
	
	ЗначениеВМассиве = Новый Массив(1);
	ЗначениеВМассиве[0] = ЧтениеXML;

	Значение = Рефлектор.ВызватьМетод(Читатель, МетодПреобразования, ЗначениеВМассиве);
	
	Возврат Значение;
	
КонецФункции

Рефлектор = Новый Рефлектор();
